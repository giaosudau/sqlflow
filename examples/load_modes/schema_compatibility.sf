-- Schema Compatibility Example
-- This example demonstrates schema compatibility validation with different load modes

-- Step 1: Create the initial users table
LOAD users
FROM (
    SELECT 
        1 AS user_id,
        'John Doe' AS name,
        'john@example.com' AS email,
        TRUE AS is_active
    UNION ALL
    SELECT 
        2 AS user_id,
        'Jane Smith' AS name,
        'jane@example.com' AS email,
        TRUE AS is_active
)
MODE REPLACE;

-- Step 2: Create new user records to append
LOAD new_users
FROM (
    SELECT 
        3 AS user_id,
        'Alice Johnson' AS name,
        'alice@example.com' AS email,
        FALSE AS is_active
    UNION ALL
    SELECT 
        4 AS user_id,
        'Bob Brown' AS name,
        'bob@example.com' AS email,
        TRUE AS is_active
)
MODE REPLACE;

-- Step 3: Append new_users to users (compatible schema)
-- This will succeed because the schemas are compatible
LOAD users
FROM new_users
MODE APPEND;

-- Step 4: Create a users_with_phone table (different schema)
LOAD users_with_phone
FROM (
    SELECT 
        5 AS user_id,
        'Charlie Davis' AS name,
        'charlie@example.com' AS email,
        TRUE AS is_active,
        '555-123-4567' AS phone
    UNION ALL
    SELECT 
        6 AS user_id,
        'Diana Evans' AS name,
        'diana@example.com' AS email,
        FALSE AS is_active,
        '555-987-6543' AS phone
)
MODE REPLACE;

-- Step 5: Create updated user records for merging
LOAD updated_users
FROM (
    SELECT 
        1 AS user_id,  -- Existing user (will update)
        'John Doe Jr.' AS name,
        'johnjr@example.com' AS email,
        FALSE AS is_active
    UNION ALL
    SELECT 
        7 AS user_id,  -- New user (will insert)
        'Grace Hill' AS name,
        'grace@example.com' AS email,
        TRUE AS is_active
)
MODE REPLACE;

-- Step 6: Merge updated_users into users
-- This will succeed because the schemas are compatible
LOAD users
FROM updated_users
MODE MERGE
MERGE_KEYS (user_id);

-- Step 7: Try to append users to users_with_phone
-- This would fail in execution because users doesn't have the phone column
-- Commented out to avoid pipeline failure
/*
LOAD users_with_phone
FROM users
MODE APPEND;
*/

-- Step 8: Try to append users_with_phone to users
-- This will succeed because users_with_phone has all columns required by users
-- The extra phone column will be ignored
LOAD users
FROM users_with_phone
MODE APPEND;

-- Step 9: Create a table with incompatible types
LOAD users_incompatible_types
FROM (
    SELECT 
        '8' AS user_id,  -- String instead of integer
        'Henry Ford' AS name,
        'henry@example.com' AS email,
        'yes' AS is_active  -- String instead of boolean
)
MODE REPLACE;

-- Step 10: Try to merge users_incompatible_types into users
-- This would fail in execution due to incompatible types
-- Commented out to avoid pipeline failure
/*
LOAD users
FROM users_incompatible_types
MODE MERGE
MERGE_KEYS (user_id);
*/

-- Step 11: Select a subset of columns to ensure compatibility
LOAD users
FROM (
    SELECT 
        user_id,
        name,
        email,
        is_active
    FROM users_with_phone
    WHERE user_id > 5  -- Only get users not already in the table
)
MODE APPEND;

-- Final step: View the combined users table
LOAD users_final_view
FROM (
    SELECT * FROM users ORDER BY user_id
)
MODE REPLACE; 