# SQLFlow Comment Triggered Tests - Updated workflow for proper PR checkout
name: Comment Triggered Tests

on:
  issue_comment:
    types: [created]

# Ensure we have proper permissions
permissions:
  contents: read
  pull-requests: write  # Need write to add reactions
  statuses: write      # Need write to update PR status
  actions: read
  issues: read

jobs:
  # Process the comment and determine which tests to run
  process-comment:
    runs-on: ubuntu-latest
    # Only run on PR comments, not issue comments
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/test') }}
    outputs:
      run-integration: ${{ steps.check-trigger.outputs.run-integration }}
      run-performance: ${{ steps.check-trigger.outputs.run-performance }}
      pr-sha: ${{ steps.get-pr-info.outputs.pr-sha }}
      pr-ref: ${{ steps.get-pr-info.outputs.pr-ref }}
      pr-repo: ${{ steps.get-pr-info.outputs.pr-repo }}
    steps:
      - name: Add initial reaction
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const comment_id = context.payload.comment.id;
            await github.rest.reactions.createForIssueComment({
              owner,
              repo,
              comment_id,
              content: 'eyes'
            });

      - name: Get PR information
        id: get-pr-info
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            
            try {
              // Get PR information
              const pr = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: issue_number
              });
              
              console.log('PR Information:');
              console.log(`- Head SHA: ${pr.data.head.sha}`);
              console.log(`- Head Ref: ${pr.data.head.ref}`);
              console.log(`- Head Repo: ${pr.data.head.repo.full_name}`);
              console.log(`- Base Repo: ${pr.data.base.repo.full_name}`);
              
              core.setOutput('pr-sha', pr.data.head.sha);
              core.setOutput('pr-ref', pr.data.head.ref);
              core.setOutput('pr-repo', pr.data.head.repo.full_name);
              
            } catch (error) {
              console.error('Error getting PR information:', error);
              core.setFailed(`Failed to get PR information: ${error.message}`);
            }

      - name: Check comment triggers
        id: check-trigger
        run: |
          COMMENT="${{ github.event.comment.body }}"
          # Convert to lowercase for case-insensitive matching
          COMMENT_LOWER=$(echo "$COMMENT" | tr '[:upper:]' '[:lower:]')
          
          # Check for integration test trigger
          if echo "$COMMENT_LOWER" | grep -qE "/test integration|test it|run tests"; then
            echo "run-integration=true" >> $GITHUB_OUTPUT
          else
            echo "run-integration=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for performance test trigger - also triggered by simple commands
          if echo "$COMMENT_LOWER" | grep -qE "/test performance|test it|run tests"; then
            echo "run-performance=true" >> $GITHUB_OUTPUT
          else
            echo "run-performance=false" >> $GITHUB_OUTPUT
          fi

      - name: Update reaction on success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const comment_id = context.payload.comment.id;
            // Remove eyes reaction
            const reactions = await github.rest.reactions.listForIssueComment({
              owner,
              repo,
              comment_id
            });
            for (const reaction of reactions.data) {
              if (reaction.content === 'eyes') {
                await github.rest.reactions.deleteForIssueComment({
                  owner,
                  repo,
                  comment_id,
                  reaction_id: reaction.id
                });
              }
            }
            // Add rocket reaction
            await github.rest.reactions.createForIssueComment({
              owner,
              repo,
              comment_id,
              content: 'rocket'
            });

  # Integration testing job - triggered by comment
  integration-test:
    needs: process-comment
    if: needs.process-comment.outputs.run-integration == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Get PR details for checkout
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            
            // Get PR information
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: issue_number
            });
            
            console.log(`PR head SHA: ${pr.data.head.sha}`);
            console.log(`PR head repo: ${pr.data.head.repo.full_name}`);
            console.log(`PR head ref: ${pr.data.head.ref}`);
            
            core.setOutput('pr-sha', pr.data.head.sha);
            core.setOutput('pr-repo', pr.data.head.repo.full_name);
            core.setOutput('pr-ref', pr.data.head.ref);

      - uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr-details.outputs.pr-repo }}
          ref: ${{ steps.pr-details.outputs.pr-sha }}
          fetch-depth: 0

      - name: Debug - Check current directory and contents
        run: |
          echo "Current working directory:"
          pwd
          echo "Contents of current directory:"
          ls -la
          echo "Contents of examples directory (if it exists):"
          ls -la examples/ || echo "examples directory not found"
          echo "Git status:"
          git status
          echo "Git log (last commit):"
          git log -1 --oneline

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all]

      - name: Run comprehensive integration tests (Phase 2 demo + pytest)
        id: integration-tests
        env:
          CI: true
          INTEGRATION_TESTS: true
        run: |
          # Use the unified integration test runner
          echo "::group::Running comprehensive integration tests"
          ./run_integration_tests.sh --coverage --verbose
          echo "::endgroup::"

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true
          flags: integration-complete

      - name: Comment on PR - Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            
            const successComment = `## üéâ Integration Tests Passed!

            ‚úÖ **Phase 2 Demo**: All 6 pipeline implementations validated successfully
            ‚úÖ **Integration Tests**: pytest suite passed with external services  
            ‚úÖ **Services**: PostgreSQL, MinIO, Redis all healthy
            ‚úÖ **Coverage**: Test coverage uploaded to Codecov

            **What was tested:**
            - PostgreSQL connector with resilience patterns
            - S3 connector with cost management and partition awareness  
            - Incremental loading with automatic watermarks
            - Multi-connector workflows (PostgreSQL ‚Üí Transform ‚Üí S3)
            - Enhanced connector features and backward compatibility
            - Integration test suite with external service dependencies

            Ready to merge! üöÄ`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: successComment
            });

      - name: Comment on PR - Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            
            const failureComment = `## ‚ùå Integration Tests Failed

            Some integration tests did not pass. Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

            **Common causes:**
            - Service startup failures (PostgreSQL, MinIO, Redis)
            - Missing pipeline outputs (check SQLFlow pipeline execution)
            - Integration test failures (external service connectivity)
            - Docker Compose issues or resource constraints

            **To debug locally:**
            \`\`\`bash
            # Run the same comprehensive test suite
            ./run_integration_tests.sh --verbose --keep-services

            # Check service health
            cd examples/phase2_integration_demo
            python3 run_demo.py --start-only
            python3 scripts/service_manager.py status
            \`\`\`

            Please fix the issues and trigger tests again with a new comment containing \`/test\` üîß`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: failureComment
            });

      - name: Cleanup services on failure
        if: always()
        run: |
          # Always cleanup Docker services
          if [ -d "examples/phase2_integration_demo" ]; then
            cd examples/phase2_integration_demo
            python3 run_demo.py --stop || echo "Cleanup failed, but continuing"
          fi
          # Also cleanup any dangling containers
          docker compose down --volumes --remove-orphans 2>/dev/null || echo "No containers to cleanup"

  # Performance testing job - triggered by comment
  performance-test:
    needs: process-comment
    if: needs.process-comment.outputs.run-performance == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Get PR details for checkout
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            
            // Get PR information
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: issue_number
            });
            
            console.log(`PR head SHA: ${pr.data.head.sha}`);
            console.log(`PR head repo: ${pr.data.head.repo.full_name}`);
            console.log(`PR head ref: ${pr.data.head.ref}`);
            
            core.setOutput('pr-sha', pr.data.head.sha);
            core.setOutput('pr-repo', pr.data.head.repo.full_name);
            core.setOutput('pr-ref', pr.data.head.ref);

      - uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr-details.outputs.pr-repo }}
          ref: ${{ steps.pr-details.outputs.pr-sha }}
          fetch-depth: 0

      - name: Debug - Check current directory and contents
        run: |
          echo "Current working directory:"
          pwd
          echo "Contents of current directory:"
          ls -la
          echo "Contents of examples directory (if it exists):"
          ls -la examples/ || echo "examples directory not found"
          echo "Git status:"
          git status
          echo "Git log (last commit):"
          git log -1 --oneline

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all]

      - name: Run performance tests with coverage
        env:
          INTEGRATION_TESTS: true
        run: |
          # Run performance tests with coverage if they exist
          python -m pytest tests/integration/ -k "performance" \
            --cov=sqlflow --cov-append --cov-report=xml --cov-report=term \
            -v --tb=short || echo "No performance tests found"

      - name: Upload performance test coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true
          flags: performance 