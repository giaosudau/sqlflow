-- Ecommerce Daily Sales Analysis Pipeline
--
-- Business Purpose: 
--   This pipeline extracts sales data from PostgreSQL, 
--   enriches it with customer and product information, and generates
--   business KPIs to help understand sales performance by category and region.
--   It then exports these insights to S3 and sends notifications via REST API.
--
-- Pipeline Steps: Extract → Transform → Load → Notify

-- Define data sources
SOURCE postgres_source TYPE POSTGRES PARAMS {
  "host": "postgres",
  "port": 5432,
  "dbname": "ecommerce",
  "user": "sqlflow",
  "password": "sqlflow123",
  "table": "sales"
};

SOURCE pg_customers TYPE POSTGRES PARAMS {
  "host": "postgres",
  "port": 5432,
  "dbname": "ecommerce",
  "user": "sqlflow",
  "password": "sqlflow123",
  "table": "customers"
};

SOURCE pg_products TYPE POSTGRES PARAMS {
  "host": "postgres",
  "port": 5432,
  "dbname": "ecommerce",
  "user": "sqlflow",
  "password": "sqlflow123",
  "table": "products"
};

-- Load data from Postgres into tables
LOAD sales FROM postgres_source;
LOAD customers FROM pg_customers;
LOAD products FROM pg_products;

-- Business KPI: Calculate key metrics for customer analytics
CREATE TABLE customer_analysis AS 
SELECT
  customer_id,
  COUNT(DISTINCT order_id) AS order_count,
  SUM(quantity * price) AS total_spend,
  SUM(quantity) AS total_items_purchased,
  MIN(order_date) AS first_purchase_date,
  MAX(order_date) AS last_purchase_date
FROM sales
GROUP BY customer_id;

-- Business KPI: Calculate Average Order Value (AOV)
CREATE TABLE average_order_value AS
SELECT
  AVG(order_total) AS aov,
  PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY order_total) AS median_order_value
FROM (
  SELECT 
    order_id, 
    SUM(quantity * price) AS order_total
  FROM sales
  GROUP BY order_id
) order_totals;

-- Business KPI: Calculate Day-over-Day growth
CREATE TABLE daily_growth AS
SELECT
  current_day.order_date,
  current_day.daily_revenue,
  previous_day.daily_revenue AS previous_day_revenue,
  (current_day.daily_revenue - previous_day.daily_revenue) / 
    NULLIF(previous_day.daily_revenue, 0) * 100 AS growth_percentage
FROM (
  SELECT 
    order_date, 
    SUM(quantity * price) AS daily_revenue
  FROM sales
  GROUP BY order_date
) current_day
LEFT JOIN (
  SELECT 
    order_date, 
    SUM(quantity * price) AS daily_revenue
  FROM sales
  GROUP BY order_date
) previous_day ON current_day.order_date = previous_day.order_date + INTERVAL '1 day';

-- Original transformation with explicit schema
CREATE TABLE sales_enriched AS 
SELECT
  s.order_id,
  s.customer_id,
  c.name AS customer_name,
  c.region,
  s.product_id,
  p.name AS product_name,
  p.category,
  s.quantity,
  s.price,
  s.quantity * s.price AS total_amount,
  s.order_date
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
JOIN products p ON s.product_id = p.product_id;

-- Create summary tables
CREATE TABLE category_summary AS SELECT
  category,
  COUNT(DISTINCT order_id) AS num_orders,
  SUM(quantity) AS total_items,
  SUM(total_amount) AS total_revenue
FROM sales_enriched
GROUP BY category
ORDER BY total_revenue DESC;

CREATE TABLE region_summary AS SELECT
  region,
  COUNT(DISTINCT order_id) AS num_orders,
  COUNT(DISTINCT customer_id) AS num_customers,
  SUM(total_amount) AS total_revenue
FROM sales_enriched
GROUP BY region
ORDER BY total_revenue DESC;

-- Export results to MinIO (S3 compatible) for BI dashboard
EXPORT SELECT * FROM category_summary
TO "s3://analytics/reports/category_summary_${date}.parquet"
TYPE S3
OPTIONS { 
  "format": "parquet",
  "compression": "snappy",
  "endpoint_url": "http://minio:9000",
  "region": "us-east-1",
  "access_key": "minioadmin",
  "secret_key": "minioadmin",
  "bucket": "analytics"
};

EXPORT SELECT * FROM region_summary
TO "s3://analytics/reports/region_summary_${date}.parquet"
TYPE S3
OPTIONS { 
  "format": "parquet",
  "compression": "snappy",
  "endpoint_url": "http://minio:9000",
  "region": "us-east-1",
  "access_key": "minioadmin",
  "secret_key": "minioadmin",
  "bucket": "analytics"
};

-- Export customer analysis KPIs to S3
EXPORT SELECT * FROM customer_analysis
TO "s3://analytics/reports/customer_analysis_${date}.parquet"
TYPE S3
OPTIONS { 
  "format": "parquet",
  "compression": "snappy",
  "endpoint_url": "http://minio:9000",
  "region": "us-east-1",
  "access_key": "minioadmin",
  "secret_key": "minioadmin",
  "bucket": "analytics"
};

-- Export average order value KPIs to S3
EXPORT SELECT * FROM average_order_value
TO "s3://analytics/reports/average_order_value_${date}.parquet"
TYPE S3
OPTIONS { 
  "format": "parquet",
  "compression": "snappy",
  "endpoint_url": "http://minio:9000",
  "region": "us-east-1",
  "access_key": "minioadmin",
  "secret_key": "minioadmin",
  "bucket": "analytics"
};

-- Send notification to mock REST API
EXPORT SELECT 
  '${date}' AS report_date,
  (SELECT COUNT(*) FROM sales) AS total_orders,
  (SELECT SUM(total_amount) FROM sales_enriched) AS daily_revenue
TO "http://mockserver:1080/notifications"
TYPE REST
OPTIONS {
  "method": "POST",
  "headers": {
    "Content-Type": "application/json",
    "Authorization": "Bearer ${API_TOKEN}"
  }
};

-- Create a simple summary
CREATE TABLE sales_summary AS SELECT
  COUNT(*) as total_orders,
  SUM(CAST(quantity AS INTEGER) * CAST(price AS DOUBLE)) as total_revenue
FROM sales;
