name: CI

on:
  push:
    branches: [ main, dev ]
    paths:
      - '**.py'
      - 'tests/**'
      - 'setup.py'
      - 'setup.cfg'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/ci.yml'
      - 'examples/**'
  pull_request:
    branches: [ main, dev ]
    paths:
      - '**.py'
      - 'tests/**'
      - 'setup.py'
      - 'setup.cfg'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/ci.yml'
      - 'examples/**'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'unit'
        type: choice
        options:
        - unit
        - integration
        - performance
        - all

permissions:
  contents: read
  actions: read

jobs:
  # Main test job - runs automatically on every push/PR
  test:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || inputs.test_type == 'unit'
    strategy:
      matrix:
        python-version: ['3.10']

    steps: 
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all]

      - name: Run autoflake
        run: |
          autoflake --in-place --remove-all-unused-imports --remove-unused-variables --expand-star-imports --ignore-init-module-imports --recursive .

      - name: Run black formatting
        run: |
          black .

      - name: Run isort
        run: |
          isort --profile black .

      - name: Run flake8 linting
        run: |
          flake8 --ignore=E501,E221,E222,E223,E224,E303,E301,E302,E402,F401,F841,E741,W291,W293,D100,D101,W503,W504,E203 --max-complexity=10 .

      - name: Run comprehensive tests with coverage
        run: |
          # Run unit tests and local integration tests with comprehensive coverage
          python -m pytest tests/unit/ tests/integration/ -k "not external_services" \
            --cov=sqlflow --cov-branch --cov-report=xml --cov-report=term \
            --maxfail=3 -q --disable-warnings

      - name: Run basic example demo scripts
        run: |
          chmod +x ./run_all_examples.sh
          ./run_all_examples.sh

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true 
          verbose: true

  # Integration testing - triggered by manual dispatch only
  integration-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && (inputs.test_type == 'integration' || inputs.test_type == 'all')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all]

      - name: Run Phase 2 Integration Demo with shared utilities
        env:
          CI: true
        run: |
          cd examples/phase2_integration_demo
          
          # Source the shared CI utilities
          source scripts/ci_utils.sh
          
          # Set up trap for cleanup
          trap cleanup_on_exit INT TERM
          
          # Run complete integration test workflow
          if run_complete_integration_test 120; then
            echo "Integration demo completed successfully"
          else
            echo "Integration demo failed"
            exit 1
          fi
      
      - name: Run integration tests with real services and coverage
        env:
          INTEGRATION_TESTS: true
          CI: true
        run: |
          # Run integration tests that require external services with coverage
          python -m pytest tests/integration/ -k "external_services" \
            --cov=sqlflow --cov-append --cov-report=xml --cov-report=term \
            -v --tb=short

      - name: Upload external services coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false  # Don't fail if external services coverage fails
          verbose: true
          flags: external-services

      - name: Stop Phase 2 Integration Demo Services
        if: always()
        env:
          CI: true
        run: |
          cd examples/phase2_integration_demo
          source scripts/ci_utils.sh
          stop_docker_services

  # Performance testing - triggered by manual dispatch only
  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && (inputs.test_type == 'performance' || inputs.test_type == 'all')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all]

      - name: Run performance tests with coverage
        env:
          INTEGRATION_TESTS: true
        run: |
          # Run performance tests with coverage if they exist
          python -m pytest tests/integration/ -k "performance" \
            --cov=sqlflow --cov-append --cov-report=xml --cov-report=term \
            -v --tb=short || echo "No performance tests found"

      - name: Upload performance test coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true
          flags: performance