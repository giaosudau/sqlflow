-- Example demonstrating Python UDF usage in SQLFlow

-- Include the Python UDFs file
INCLUDE "examples/python_udfs/example_udf.py";

-- Source data
SOURCE products TYPE CSV PARAMS {
  "path": "examples/python_udfs/data/products.csv",
  "has_header": true
};

LOAD products INTO products_table;

-- Use scalar UDF to calculate discount
CREATE TABLE discounted_products AS
SELECT
  product_id,
  name,
  category,
  price,
  PYTHON_FUNC("example_udf.calculate_discount", price) AS discount_amount,
  price - PYTHON_FUNC("example_udf.calculate_discount", price) AS discounted_price,
  PYTHON_FUNC("example_udf.final_price", price, 0.15) AS price_after_discount
FROM products_table;

-- Use table UDF to add multiple discount calculations
CREATE TABLE product_pricing AS
SELECT * FROM PYTHON_FUNC("example_udf.add_price_metrics", products_table);

-- Use table UDF for aggregation
CREATE TABLE sales_by_category AS
SELECT * FROM PYTHON_FUNC("example_udf.sales_summary", 
  SELECT product_id, category, price, quantity FROM products_table
);

-- Export results
EXPORT
  SELECT * FROM discounted_products
TO "examples/python_udfs/output/discounted_products.csv"
TYPE LOCAL_FILE
OPTIONS { "format": "csv", "header": true };

EXPORT
  SELECT * FROM product_pricing
TO "examples/python_udfs/output/product_pricing.csv"
TYPE LOCAL_FILE
OPTIONS { "format": "csv", "header": true };

EXPORT
  SELECT * FROM sales_by_category
TO "examples/python_udfs/output/sales_by_category.csv"
TYPE LOCAL_FILE
OPTIONS { "format": "csv", "header": true }; 