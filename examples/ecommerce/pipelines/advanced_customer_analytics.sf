-- Advanced Customer Analytics Pipeline
-- Demonstrates Python UDFs, Conditionals, and Variables
-- For SQLFlow ecommerce example

-- Define variables that can be overridden at runtime
SET customer_segment = "${customer_segment|all}";
SET target_region = "${target_region|global}";
SET min_order_amount = "${min_order_amount|0}";
SET export_format = "${export_format|csv}";
SET output_dir = "${output_dir|output}";
SET run_id = "${run_id|test_run_id_101}";
SET use_csv = "${use_csv|true}";

-- Reference PostgreSQL data sources from profile
SOURCE postgres_sales FROM "postgres" OPTIONS { "table": "sales" };
SOURCE postgres_customers FROM "postgres" OPTIONS { "table": "customers" };
SOURCE postgres_products FROM "postgres" OPTIONS { "table": "products" };

-- Define CSV data sources using the profile as well
SOURCE csv_sales FROM "csv" OPTIONS { "path": "data/sales.csv", "header": true };
SOURCE csv_customers FROM "csv" OPTIONS { "path": "data/customers.csv", "header": true };
SOURCE csv_products FROM "csv" OPTIONS { "path": "data/products.csv", "header": true };

-- Load data conditionally from either CSV or PostgreSQL 
IF ${use_csv} == "true" THEN
  LOAD sales FROM csv_sales;
  LOAD customers FROM csv_customers;
  LOAD products FROM csv_products;
ELSE
  LOAD sales FROM postgres_sales;
  LOAD customers FROM postgres_customers;
  LOAD products FROM postgres_products;
END IF;

-- Enrich sales data with customer and product information
CREATE TABLE sales_enriched AS 
SELECT
  s.order_id,
  s.customer_id,
  c.name AS customer_name,
  c.email,
  c.region,
  s.product_id,
  p.name AS product_name,
  p.category,
  s.quantity,
  s.price,
  s.quantity * s.price AS total_amount,
  s.order_date,
  PYTHON_FUNC("python_udfs.sales_utils.calculate_discount", s.price, c.region) AS discount,
  PYTHON_FUNC("python_udfs.sales_utils.calculate_shipping_cost", s.quantity, c.region) AS shipping_cost,
  PYTHON_FUNC("python_udfs.sales_utils.categorize_customer", c.account_type, 0) AS customer_tier,
  PYTHON_FUNC("python_udfs.text_utils.extract_domain", c.email) AS email_domain,
  PYTHON_FUNC("python_udfs.text_utils.categorize_domain", c.email) AS domain_type,
  PYTHON_FUNC("python_udfs.text_utils.format_name", c.name) AS formatted_name
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
JOIN products p ON s.product_id = p.product_id;

-- Apply conditional filtering based on variables
CREATE TABLE filtered_sales AS
SELECT * FROM sales_enriched
WHERE 
  ('${customer_segment}' = 'all' OR customer_tier = '${customer_segment}') AND
  ('${target_region}' = 'global' OR region = '${target_region}') AND
  total_amount >= ${min_order_amount};

-- Create region-based summary
CREATE TABLE region_summary AS
SELECT
  region,
  COUNT(DISTINCT customer_id) AS unique_customers,
  COUNT(DISTINCT order_id) AS order_count,
  SUM(total_amount) AS total_revenue,
  AVG(total_amount) AS avg_order_value,
  SUM(discount) AS total_discounts,
  SUM(shipping_cost) AS total_shipping
FROM filtered_sales
GROUP BY region
ORDER BY total_revenue DESC;

-- Create customer tier summary
CREATE TABLE tier_summary AS
SELECT
  customer_tier,
  COUNT(DISTINCT customer_id) AS customer_count,
  COUNT(DISTINCT order_id) AS order_count,
  SUM(total_amount) AS total_revenue,
  AVG(total_amount) AS avg_order_value,
  SUM(discount) AS total_discounts
FROM filtered_sales
GROUP BY customer_tier
ORDER BY total_revenue DESC;

-- Create domain type summary
CREATE TABLE domain_summary AS
SELECT
  domain_type,
  COUNT(DISTINCT customer_id) AS unique_customers,
  COUNT(DISTINCT order_id) AS order_count,
  SUM(total_amount) AS total_revenue
FROM filtered_sales
GROUP BY domain_type
ORDER BY unique_customers DESC;

-- Create detailed customer analytics
CREATE TABLE customer_analytics AS
SELECT
  customer_id,
  formatted_name AS customer_name,
  masked_email,
  region,
  customer_tier,
  domain_type,
  COUNT(DISTINCT order_id) AS order_count,
  SUM(total_amount) AS total_spent,
  AVG(total_amount) AS avg_order_value,
  SUM(discount) AS total_discounts,
  SUM(shipping_cost) AS total_shipping,
  MIN(order_date) AS first_purchase,
  MAX(order_date) AS last_purchase
FROM (
  SELECT
    fs.customer_id,
    fs.formatted_name,
    fs.email,
    c.gdpr_consent,
    PYTHON_FUNC("python_udfs.text_utils.mask_email", fs.email, c.gdpr_consent) AS masked_email,
    fs.region,
    fs.customer_tier,
    fs.domain_type,
    fs.order_id,
    fs.total_amount,
    fs.discount,
    fs.shipping_cost,
    fs.order_date
  FROM filtered_sales fs
  JOIN customers c ON fs.customer_id = c.customer_id
) masked_emails
GROUP BY customer_id, formatted_name, masked_email, region, customer_tier, domain_type
ORDER BY total_spent DESC;

-- Export results to CSV files
EXPORT SELECT * FROM region_summary
TO "${output_dir}/regional_analysis/region_summary_${run_id}.${export_format}"
TYPE CSV OPTIONS {"header": true};

EXPORT SELECT * FROM tier_summary
TO "${output_dir}/customer_segments/tier_summary_${run_id}.${export_format}"
TYPE CSV OPTIONS {"header": true};

EXPORT SELECT * FROM domain_summary
TO "${output_dir}/domain_analysis/domain_summary_${run_id}.${export_format}"
TYPE CSV OPTIONS {"header": true};

EXPORT SELECT * FROM customer_analytics
TO "${output_dir}/customer_analytics/detailed_analytics_${run_id}.${export_format}"
TYPE CSV OPTIONS {"header": true};