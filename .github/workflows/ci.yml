name: CI

on:
  push:
    branches: [ main, dev ]
    paths:
      - '**.py'
      - 'tests/**'
      - 'setup.py'
      - 'setup.cfg'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/ci.yml'
      - 'examples/**'
  pull_request:
    branches: [ main, dev ]
    paths:
      - '**.py'
      - 'tests/**'
      - 'setup.py'
      - 'setup.cfg'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/ci.yml'
      - 'examples/**'
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'unit'
        type: choice
        options:
        - unit
        - integration
        - performance
        - all

jobs:
  # Main test job - runs automatically on every push/PR
  test:
    runs-on: ubuntu-latest
    if: github.event_name != 'issue_comment'
    strategy:
      matrix:
        python-version: ['3.10']

    steps: 
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all]

      - name: Run autoflake
        run: |
          autoflake --in-place --remove-all-unused-imports --remove-unused-variables --expand-star-imports --ignore-init-module-imports --recursive .

      - name: Run black formatting
        run: |
          black .

      - name: Run isort
        run: |
          isort --profile black .

      - name: Run flake8 linting
        run: |
          flake8 --ignore=E501,E221,E222,E223,E224,E303,E301,E302,E402,F401,F841,E741,W291,W293,D100,D101,W503,W504,E203 --max-complexity=10 .

      - name: Run comprehensive tests with coverage
        run: |
          # Run unit tests and local integration tests with comprehensive coverage
          python -m pytest tests/unit/ tests/integration/ -k "not external_services" \
            --cov=sqlflow --cov-branch --cov-report=xml --cov-report=term \
            --maxfail=3 -q --disable-warnings

      - name: Run basic example demo scripts
        run: |
          chmod +x ./run_all_examples.sh
          ./run_all_examples.sh

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true 
          verbose: true

  # Check if comment triggers integration tests
  check-comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request != null
    outputs:
      run-integration: ${{ steps.check.outputs.run-integration }}
      run-performance: ${{ steps.check.outputs.run-performance }}
      run-all: ${{ steps.check.outputs.run-all }}
      pr-number: ${{ steps.check.outputs.pr-number }}
    steps:
      - name: Check comment content
        id: check
        uses: actions/github-script@v6
        with:
          script: |
            const comment = context.payload.comment.body.toLowerCase().trim();
            const isCollaborator = context.payload.comment.author_association === 'COLLABORATOR' || 
                                 context.payload.comment.author_association === 'MEMBER' ||
                                 context.payload.comment.author_association === 'OWNER';
            
            console.log(`Comment: "${comment}"`);
            console.log(`Author association: ${context.payload.comment.author_association}`);
            console.log(`Event name: ${context.eventName}`);
            
            // Set PR number for later use
            if (context.payload.issue && context.payload.issue.number) {
              core.setOutput('pr-number', context.payload.issue.number);
            }
            
            if (!isCollaborator) {
              console.log('Comment author is not a collaborator, ignoring');
              core.setOutput('run-integration', 'false');
              core.setOutput('run-performance', 'false');
              core.setOutput('run-all', 'false');
              return;
            }
            
            const runIntegration = comment.includes('/test integration') || comment.includes('/test all');
            const runPerformance = comment.includes('/test performance') || comment.includes('/test all');
            const runAll = comment.includes('/test all');
            
            console.log(`Run integration: ${runIntegration}`);
            console.log(`Run performance: ${runPerformance}`);
            console.log(`Run all: ${runAll}`);
            
            core.setOutput('run-integration', runIntegration.toString());
            core.setOutput('run-performance', runPerformance.toString());
            core.setOutput('run-all', runAll.toString());

  # Integration testing - triggered by comment or manual dispatch
  integration-test:
    runs-on: ubuntu-latest
    needs: check-comment
    if: |
      (github.event_name == 'issue_comment' && needs.check-comment.outputs.run-integration == 'true') ||
      (github.event_name == 'workflow_dispatch' && (inputs.test_type == 'integration' || inputs.test_type == 'all'))

    steps:
      - name: Get PR info for comment
        if: github.event_name == 'issue_comment'
        id: pr-info
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number
            });
            core.setOutput('pr-ref', pr.head.ref);
            core.setOutput('pr-sha', pr.head.sha);
            core.setOutput('pr-repo', pr.head.repo.full_name);

      - uses: actions/checkout@v3
        if: github.event_name == 'issue_comment'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ steps.pr-info.outputs.pr-repo }}
          ref: ${{ steps.pr-info.outputs.pr-sha }}
          fetch-depth: 0

      - uses: actions/checkout@v3
        if: github.event_name != 'issue_comment'
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all]

      - name: Add comment reaction
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });

      - name: Run Phase 2 Integration Demo with shared utilities
        env:
          CI: true
        run: |
          cd examples/phase2_integration_demo
          
          # Source the shared CI utilities
          source scripts/ci_utils.sh
          
          # Set up trap for cleanup
          trap cleanup_on_exit INT TERM
          
          # Run complete integration test workflow
          if run_complete_integration_test 120; then
            echo "Integration demo completed successfully"
          else
            echo "Integration demo failed"
            exit 1
          fi
      
      - name: Run integration tests with real services and coverage
        env:
          INTEGRATION_TESTS: true
          CI: true
        run: |
          # Run integration tests that require external services with coverage
          python -m pytest tests/integration/ -k "external_services" \
            --cov=sqlflow --cov-append --cov-report=xml --cov-report=term \
            -v --tb=short

      - name: Upload external services coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false  # Don't fail if external services coverage fails
          verbose: true
          flags: external-services

      - name: Stop Phase 2 Integration Demo Services
        if: always()
        env:
          CI: true
        run: |
          cd examples/phase2_integration_demo
          source scripts/ci_utils.sh
          stop_docker_services

      - name: Comment results
        if: always() && github.event_name == 'issue_comment'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: run } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            const status = run.conclusion === 'success' ? '✅ Integration tests passed!' : 
                          run.conclusion === 'failure' ? '❌ Integration tests failed!' : 
                          '⏳ Integration tests are still running...';
            
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            // Use the issue number from the original comment event
            const issueNumber = context.payload.issue ? context.payload.issue.number : context.issue.number;
            
            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${status}\n\n[View run details](${runUrl})`
            });

  # Performance testing - triggered by comment or manual dispatch
  performance-test:
    runs-on: ubuntu-latest
    needs: check-comment
    if: |
      (github.event_name == 'issue_comment' && needs.check-comment.outputs.run-performance == 'true') ||
      (github.event_name == 'workflow_dispatch' && (inputs.test_type == 'performance' || inputs.test_type == 'all'))

    steps:
      - name: Get PR info for comment
        if: github.event_name == 'issue_comment'
        id: pr-info
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number
            });
            core.setOutput('pr-ref', pr.head.ref);
            core.setOutput('pr-sha', pr.head.sha);
            core.setOutput('pr-repo', pr.head.repo.full_name);

      - uses: actions/checkout@v3
        if: github.event_name == 'issue_comment'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ steps.pr-info.outputs.pr-repo }}
          ref: ${{ steps.pr-info.outputs.pr-sha }}
          fetch-depth: 0

      - uses: actions/checkout@v3
        if: github.event_name != 'issue_comment'
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all]

      - name: Add comment reaction
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });

      - name: Run performance tests with coverage
        env:
          INTEGRATION_TESTS: true
        run: |
          # Run performance tests with coverage if they exist
          python -m pytest tests/integration/ -k "performance" \
            --cov=sqlflow --cov-append --cov-report=xml --cov-report=term \
            -v --tb=short || echo "No performance tests found"

      - name: Upload performance test coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true
          flags: performance

      - name: Comment results
        if: always() && github.event_name == 'issue_comment'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: run } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            const status = run.conclusion === 'success' ? '✅ Performance tests passed!' : 
                          run.conclusion === 'failure' ? '❌ Performance tests failed!' : 
                          '⏳ Performance tests are still running...';
            
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            // Use the issue number from the original comment event
            const issueNumber = context.payload.issue ? context.payload.issue.number : context.issue.number;
            
            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${status}\n\n[View run details](${runUrl})`
            });

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read