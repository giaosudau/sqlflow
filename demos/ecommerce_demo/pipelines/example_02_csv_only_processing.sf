-- ===============================================================
-- EXAMPLE: CSV-Only Processing
-- ===============================================================
-- This pipeline demonstrates a workflow using only CSV files for input and output.
-- It does not require any external services like databases or S3.
-- Run with: docker compose exec sqlflow sqlflow pipeline run /app/sqlflow/demos/ecommerce_demo/pipelines/example_02_csv_only_processing.sf --vars '{"date": "2023-10-25"}'

-- Set the date variable (can be overridden with --vars)
SET date = "${date|2023-10-25}";
SET output_dir = "target"; -- Ensure output goes to the mounted target directory

-- Define data sources from CSV files
SOURCE sales_csv TYPE CSV PARAMS {
  "path": "data/sales_2023-10-25.csv", -- Using a specific dated sales file for this example
  "has_header": true
};

SOURCE customers_csv TYPE CSV PARAMS {
  "path": "data/customers.csv",
  "has_header": true
};

SOURCE products_csv TYPE CSV PARAMS {
  "path": "data/products.csv",
  "has_header": true
};

-- Load data from CSV files into tables
LOAD sales FROM sales_csv;
LOAD customers FROM customers_csv;
LOAD products FROM products_csv;

-- Debug: Count records in each table (optional, can be commented out)
CREATE TABLE debug_table_counts AS 
SELECT 
  (SELECT COUNT(*) FROM sales) as sales_count,
  (SELECT COUNT(*) FROM customers) as customers_count,
  (SELECT COUNT(*) FROM products) as products_count;

-- Join the data to create an enriched sales view
CREATE TABLE sales_enriched AS 
SELECT
  s.order_id,
  s.customer_id,
  c.name AS customer_name,
  c.region AS customer_region, -- Aliasing to avoid conflict if product also had region
  s.product_id,
  p.name AS product_name,
  p.category AS product_category,
  CAST(s.quantity AS INTEGER) AS quantity,
  CAST(s.price AS DOUBLE) AS price,
  (CAST(s.quantity AS INTEGER) * CAST(s.price AS DOUBLE)) AS total_amount,
  s.order_date
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
JOIN products p ON s.product_id = p.product_id;

-- Create summary tables
CREATE TABLE category_summary AS 
SELECT
  product_category,
  COUNT(DISTINCT order_id) AS num_orders,
  SUM(quantity) AS total_items,
  SUM(total_amount) AS total_revenue
FROM sales_enriched
GROUP BY product_category
ORDER BY total_revenue DESC;

CREATE TABLE region_summary AS 
SELECT
  customer_region,
  COUNT(DISTINCT order_id) AS num_orders,
  COUNT(DISTINCT customer_id) AS num_customers,
  SUM(total_amount) AS total_revenue
FROM sales_enriched
GROUP BY customer_region
ORDER BY total_revenue DESC;

-- Export results to CSV files in the target directory
EXPORT 
  SELECT * FROM category_summary
TO "${output_dir}/csv_category_summary_${date}.csv"
TYPE CSV
OPTIONS { 
  "header": true
};

EXPORT 
  SELECT * FROM region_summary
TO "${output_dir}/csv_region_summary_${date}.csv"
TYPE CSV
OPTIONS { 
  "header": true
};

-- Create and export an overall sales summary
CREATE TABLE overall_sales_summary AS 
SELECT
  COUNT(DISTINCT order_id) as total_orders,
  SUM(total_amount) as total_revenue,
  AVG(total_amount) as average_order_value
FROM sales_enriched;

EXPORT 
  SELECT * FROM overall_sales_summary
TO "${output_dir}/csv_overall_sales_summary_${date}.csv"
TYPE CSV
OPTIONS { 
  "header": true
};

-- Export debug table count if needed (can be commented out)
EXPORT 
  SELECT * FROM debug_table_counts
TO "${output_dir}/csv_debug_table_counts_${date}.csv"
TYPE CSV
OPTIONS { 
  "header": true
}; 