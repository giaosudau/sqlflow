-- Define data sources
SOURCE postgres_source TYPE POSTGRES PARAMS {
  "host": "postgres",
  "port": 5432,
  "dbname": "ecommerce",
  "user": "sqlflow",
  "password": "sqlflow123",
  "table": "sales"
};

SOURCE pg_customers TYPE POSTGRES PARAMS {
  "host": "postgres",
  "port": 5432,
  "dbname": "ecommerce",
  "user": "sqlflow",
  "password": "sqlflow123",
  "table": "customers"
};

SOURCE pg_products TYPE POSTGRES PARAMS {
  "host": "postgres",
  "port": 5432,
  "dbname": "ecommerce",
  "user": "sqlflow",
  "password": "sqlflow123",
  "table": "products"
};

-- Load data from Postgres into tables
LOAD sales FROM postgres_source;
LOAD customers FROM pg_customers;
LOAD products FROM pg_products;

-- Debug: Show sample data with explicit column selection
CREATE TABLE debug_sales_data AS 
SELECT 
  order_id,
  customer_id,
  product_id,
  quantity,
  price,
  order_date
FROM sales 
LIMIT 5;

CREATE TABLE debug_customers_data AS 
SELECT 
  customer_id,
  name,
  email,
  region,
  signup_date
FROM customers 
LIMIT 5;

-- Debug: Count records in each table
CREATE TABLE debug_table_counts AS 
SELECT 
  (SELECT COUNT(*) FROM sales) as sales_count,
  (SELECT COUNT(*) FROM customers) as customers_count,
  (SELECT COUNT(*) FROM products) as products_count;

-- Try the join with a simpler query first
CREATE TABLE debug_join_test AS 
SELECT 
  s.order_id,
  s.customer_id,
  c.name as customer_name
FROM sales s
LEFT JOIN customers c ON s.customer_id = c.customer_id
LIMIT 5;

-- Original transformation with explicit schema
CREATE TABLE sales_enriched AS 
SELECT
  s.order_id,
  s.customer_id,
  c.name AS customer_name,
  c.region,
  s.product_id,
  p.name AS product_name,
  p.category,
  s.quantity,
  s.price,
  s.quantity * s.price AS total_amount,
  s.order_date
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
JOIN products p ON s.product_id = p.product_id;

-- Create summary tables
CREATE TABLE category_summary AS SELECT
  category,
  COUNT(DISTINCT order_id) AS num_orders,
  SUM(quantity) AS total_items,
  SUM(total_amount) AS total_revenue
FROM sales_enriched
GROUP BY category
ORDER BY total_revenue DESC;

CREATE TABLE region_summary AS SELECT
  region,
  COUNT(DISTINCT order_id) AS num_orders,
  COUNT(DISTINCT customer_id) AS num_customers,
  SUM(total_amount) AS total_revenue
FROM sales_enriched
GROUP BY region
ORDER BY total_revenue DESC;

-- Export results to MinIO (S3 compatible) for BI dashboard
EXPORT SELECT * FROM category_summary
TO "s3://analytics/reports/category_summary_${date}.parquet"
TYPE S3
OPTIONS { 
  "format": "parquet",
  "compression": "snappy",
  "endpoint_url": "http://minio:9000",
  "region": "us-east-1",
  "access_key": "minioadmin",
  "secret_key": "minioadmin",
  "bucket": "analytics"
};

EXPORT SELECT * FROM region_summary
TO "s3://analytics/reports/region_summary_${date}.parquet"
TYPE S3
OPTIONS { 
  "format": "parquet",
  "compression": "snappy",
  "endpoint_url": "http://minio:9000",
  "region": "us-east-1",
  "access_key": "minioadmin",
  "secret_key": "minioadmin",
  "bucket": "analytics"
};

-- Send notification to mock REST API
EXPORT SELECT 
  '${date}' AS report_date,
  (SELECT COUNT(*) FROM sales) AS total_orders,
  (SELECT SUM(total_amount) FROM sales_enriched) AS daily_revenue
TO "http://mockserver:1080/notifications"
TYPE REST
OPTIONS {
  "method": "POST",
  "headers": {
    "Content-Type": "application/json",
    "Authorization": "Bearer ${API_TOKEN}"
  }
};

-- Create a simple summary
CREATE TABLE sales_summary AS SELECT
  COUNT(*) as total_orders,
  SUM(CAST(quantity AS INTEGER) * CAST(price AS DOUBLE)) as total_revenue
FROM sales;
