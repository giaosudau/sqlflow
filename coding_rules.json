{
  "metadata": {
    "project": "SQLFlow",
    "version": "0.1.0",
    "description": "Coding rules, development workflow, and testing standards for SQLFlow"
  },
  "roles": {
    "principal_software_engineer": {
      "responsibilities": [
        "Define overall architecture",
        "Mentor team members",
        "Ensure milestone dependencies"
      ]
    },
    "tech_lead": {
      "responsibilities": [
        "Oversee daily technical direction",
        "Resolve blockers",
        "Approve design changes"
      ]
    },
    "python_maintainer": {
      "responsibilities": [
        "Enforce Python style (PEP 8, type hints)",
        "Maintain Copilot and cursor rules",
        "Review core library PRs"
      ]
    },
    "connector_developer": {
      "responsibilities": [
        "Implement Connector and ExportConnector plugins",
        "Ensure resource (cursor/connection) safety",
        "Validate schema correctness"
      ]
    },
    "qa_engineer": {
      "responsibilities": [
        "Define and write integration tests",
        "Maintain test harness (DB containers, localstack)",
        "Verify end-to-end pipeline workflows"
      ]
    }
  },
  "coding_standards": {
    "style": {
      "pep8": true,
      "google_docstrings": true,
      "single_responsibility": true,
      "dry": true,
      "type_hints": true,
      "formatting": {
        "black": true,
        "isort": true
      }
    },
    "git": {
      "commit_frequently": true,
      "commit_message_format": "feat(scope): description",
      "branch_per_task": true,
      "pr_requirements": [
        "Describe What, Why, How, Testing",
        "Limit size to ~200 lines",
        "Include tests"
      ]
    },
    "copilot_cursor": {
      "copilot_instructions_file": ".github/copilot-instructions.md",
      "cursor_rules_file": ".cursorrules",
      "prompt_guidance": true
    }
  },
  "development_workflow": {
    "tdd": {
      "red_green_refactor": true,
      "focus_on_public_apis": true,
      "fixtures_in_conftest": true,
      "tmp_path_for_files": true,
      "minimize_mocks": true
    },
    "linting": {
      "pre_commit_hooks": [
        "autoflake --in-place --remove-all-unused-imports --remove-unused-variables --expand-star-imports --ignore-init-module-imports",
        "black",
        "isort --profile black",
        "flake8 --ignore=E501,E221,E222,E223,E224,E303,E301,E302,E402,F401,F841,E741,W291,W293,D100,D101,W503,W504,E203 --max-complexity=10"
      ],
      "ci_enforcement": true
    }
  },
  "testing_guide": {
    "unit_tests": {
      "frameworks": ["pytest", "unittest"],
      "coverage_target": ">=90%",
      "cursor_safety_tests": true
    },
    "integration_tests": {
      "run_via_cli": "sqlflow run <script>.sf",
      "harness": {
        "duckdb_in_memory": true,
        "postgres_docker": true,
        "s3_localstack": true
      },
      "golden_fixtures_dir": "tests/integration/fixtures"
    },
    "snapshot_testing": {
      "cli_outputs": true,
      "dag_visualization": true
    }
  },
  "debugging_and_rca": {
    "logging": {
      "use_logging_module": true,
      "levels": ["DEBUG", "INFO", "WARN"]
    },
    "debug_tools": ["logger.debug", "pdb.set_trace()"],
    "rca_method": ["5-Whys", "PDCA"]
  },
  "ci_pipeline": {
    "pre_merge": [
      "autoflake --in-place --remove-all-unused-imports --remove-unused-variables --expand-star-imports --ignore-init-module-imports .",
      "black .",
      "isort --profile black .",
      "flake8 --ignore=E501,E221,E222,E223,E224,E303,E301,E302,E402,F401,F841,E741,W291,W293,D100,D101,W503,W504,E203 --max-complexity=10 .",
      "pytest -q --maxfail=1 --disable-warnings"
    ],
    "post_merge_nightly": "full_integration_suite"
  },
  "philosophy": {
    "balance": {
      "speed": true,
      "quality": true,
      "avoid_perfectionism": true
    },
    "commit_policy": "after each ~4h task"
  }
}
