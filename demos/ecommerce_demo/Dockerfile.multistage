# Builder stage for SQLFlow package
FROM python:3.11-slim-bookworm as builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy SQLFlow source code for building
COPY ../../pyproject.toml /build/
COPY ../../README.md /build/
COPY ../../CHANGELOG.md /build/
COPY ../../sqlflow /build/sqlflow/

# Install build dependencies
RUN pip install --no-cache-dir build wheel

# Build the SQLFlow package
RUN python -m build --wheel

# Final stage for the demo application
FROM python:3.11-slim-bookworm

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Create sqlflow directory structure
RUN mkdir -p /app/sqlflow/demos/ecommerce_demo/target \
    && chmod 777 /app/sqlflow/demos/ecommerce_demo/target

# Copy data files and configuration
COPY data/ /app/sqlflow/demos/ecommerce_demo/data/
COPY pipelines/ /app/sqlflow/demos/ecommerce_demo/pipelines/
COPY profiles/ /app/sqlflow/demos/ecommerce_demo/profiles/
COPY mock-config/ /app/sqlflow/demos/ecommerce_demo/mock-config/
COPY init-scripts/ /app/sqlflow/demos/ecommerce_demo/init-scripts/

# Copy and install the built wheel from the builder stage
COPY --from=builder /build/dist/*.whl /app/
RUN pip install --no-cache-dir /app/*.whl

# Set environment variables
ENV PYTHONPATH="/app:${PYTHONPATH}"
ENV PATH="/app/bin:${PATH}"

# Create target directory for outputs
RUN mkdir -p /app/target && chmod 777 /app/target

# Default command when container starts
CMD ["sqlflow", "pipeline", "run", "/app/sqlflow/demos/ecommerce_demo/pipelines/simple_test.sf", "--vars", "{\"date\": \"2023-10-25\"}", "--profile", "production"]
